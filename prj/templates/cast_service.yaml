apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.cast.name }}-service
spec:
  ports:
  - name: "{{ .Values.cast.ports.name }}"
    port: {{ .Values.cast.ports.port }}
    targetPort: {{ .Values.cast.ports.targetPort }}
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.cast.name }}-service
spec:
  replicas: {{ .Values.cast.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.cast.name }}-service
  template:
    metadata:
      labels:
        app: {{ .Values.cast.name }}-service
    spec:
      containers:
      - args:
        - uvicorn
        - app.main:app
        - --reload
        - --host
        - 0.0.0.0
        - --port
        - "8000"
        env:
        - name: DATABASE_URI
          value: {{ .Values.cast.containers.env.DATABASE_URI  }}
        image: "{{ .Values.cast.image.repository }}:{{ .Values.cast.image.tag }}"  
        imagePullPolicy: "Always"
        name: {{ .Values.cast.name }}-service
        ports:
        - containerPort: {{ .Values.cast.containers.ports.containerPort }}
        resources: {}
        volumeMounts:
        - mountPath:  {{ .Values.cast.containers.volumeMounts.mountPath }}
          name: {{ .Values.cast.containers.volumeMounts.name }}
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: {{ .Values.cast.containers.volumeMounts.name }}
        persistentVolumeClaim:
          claimName: {{ .Values.cast.containers.volumeMounts.name }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
  name: {{ .Values.cast.containers.volumeMounts.name }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi